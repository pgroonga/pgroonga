name: Linux
on:
  push:
  pull_request:
  schedule:
    # * UTC 16:30
    # * JST 01:30
    - cron: |
        30 16 * * *
concurrency:
  group: ${{ github.head_ref || github.sha }}-${{ github.workflow }}
  cancel-in-progress: true
jobs:
  test:
    if: >-
      github.event_name != 'schedule' ||
      (github.event_name == 'schedule' &&
       github.repository_owner == 'pgroonga')
    name: Test
    timeout-minutes: ${{ github.event_name == 'schedule' && 150 || 30 }}
    strategy:
      fail-fast: false
      matrix:
        label:
          - PostgreSQL 13
          - PostgreSQL 14
          - PostgreSQL 15
          - PostgreSQL 16
          - PostgreSQL 17
          - PostgreSQL 18
          - PostgreSQL 18 with Groonga main
          - PostgreSQL 19
        include:
          - label: PostgreSQL 13
            postgresql-version: "13"
          - label: PostgreSQL 14
            postgresql-version: "14"
          - label: PostgreSQL 15
            postgresql-version: "15"
          - label: PostgreSQL 16
            postgresql-version: "16"
          - label: PostgreSQL 17
            postgresql-version: "17"
          - label: PostgreSQL 18
            postgresql-version: "18"
          - label: PostgreSQL 18 with Groonga main
            groonga-main: "yes"
            postgresql-version: "18"
          - label: PostgreSQL 19
            postgresql-unreleased: "yes"
            postgresql-version: "19"
    env:
      GROONGA_MAIN: ${{ matrix.groonga-main }}
      POSTGRESQL_UNRELEASED: ${{ matrix.postgresql-unreleased }}
      PGROONGA_BENCHMARK_GEMFILE: ${{ github.workspace }}/pgroonga-benchmark/Gemfile
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        with:
          submodules: recursive
      - uses: actions/checkout@v5
        with:
          repository: pgroonga/benchmark
          path: pgroonga-benchmark
      - name: Prepare language model caching
        if: matrix.groonga-main == 'yes'
        run: |
          download_cache_dir="/tmp/cache/language-models"
          mkdir -p "${download_cache_dir}"
          echo "GRN_LANGUAGE_MODEL_DOWNLOAD_CACHE_DIR=${download_cache_dir}" >> ${GITHUB_ENV}
          echo "PGRN_LANGUAGE_MODEL_TEST=yes" >> ${GITHUB_ENV}
      - name: Cache language models
        if: matrix.groonga-main == 'yes'
        uses: actions/cache@v4
        with:
          path: /tmp/cache/language-models
          key: linux-test-cache-language-models-${{ hashFiles('sql/function/language-model-vectorize/**') }}
          restore-keys: linux-test-cache-language-models-
      - name: Install dependency
        run: |
          curl \
            --silent \
            --location \
            https://github.com/groonga/groonga/raw/HEAD/data/travis/setup.sh | \
            sh
          if [ "${GROONGA_MAIN}" != "yes" ]; then
            sudo apt -y -V install \
              groonga-token-filter-stem \
              groonga-tokenizer-mecab \
              libmsgpack-dev
          fi
          sudo apt -y -V install \
            libmecab-dev \
            libxxhash-dev
      - name: Install PostgreSQL
        run: |
          sudo apt -y -V purge '^postgresql'
          suite=$(lsb_release -cs)-pgdg
          sudo tee /etc/apt/sources.list.d/pgdg.list <<APT_SOURCE
          deb http://apt.postgresql.org/pub/repos/apt ${suite} main
          APT_SOURCE
          if [ "${POSTGRESQL_UNRELEASED}" = "yes" ]; then
            suite="$(lsb_release -cs)-pgdg-snapshot"
            sudo tee /etc/apt/sources.list.d/pgdg-snapshot.list <<APT_SOURCE
          deb http://apt.postgresql.org/pub/repos/apt ${suite} main ${{ matrix.postgresql-version }}
          APT_SOURCE
          fi
          wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
          sudo apt update
          sudo apt -y -V -t ${suite} install \
            postgresql-${{ matrix.postgresql-version }} \
            postgresql-server-dev-${{ matrix.postgresql-version }}
          if [ ${{ matrix.postgresql-version }} -eq 15 ]; then
            # It seems that PostgreSQL 15 dropped stats_temp_directory...?
            sudo sed -i'' \
              -e 's/^stats_temp_directory/#stats_temp_directory/g' \
              /etc/postgresql/15/main/postgresql.conf
          fi
          cat <<CONF | sudo tee --append /etc/postgresql/*/main/postgresql.conf
          enable_partitionwise_join = on
          max_prepared_transactions = 1
          random_page_cost = 0
          CONF
          if [ "${GROONGA_MAIN}" = "yes" ]; then
            echo "GRN_LANGUAGE_MODEL_DOWNLOAD_CACHE_DIR = '${GRN_LANGUAGE_MODEL_DOWNLOAD_CACHE_DIR}'" |
              sudo tee --append /etc/postgresql/*/main/environment
          fi
          sudo systemctl restart postgresql
          sudo -u postgres -H psql -c "CREATE ROLE ${USER} SUPERUSER LOGIN;"
      - name: Install Meson
        run: |
          sudo apt install -y -V meson ninja-build
      - name: Configure PGroonga
        run: |
          meson setup ../pgroonga.build -Dpg_config=${PG_CONFIG}
        env:
          PG_CONFIG: "/usr/lib/postgresql/${{ matrix.postgresql-version }}/bin/pg_config"
      - name: Build PGroonga
        run: |
          meson compile -C ../pgroonga.build
      - name: Install PGroonga
        run: |
          sudo meson install -C ../pgroonga.build
      - name: Permission settings for the language model's cache directory
        if: matrix.groonga-main == 'yes'
        run: |
          sudo chown -R postgres: "${GRN_LANGUAGE_MODEL_DOWNLOAD_CACHE_DIR}"
      - name: Run regression test
        run: |
          meson test -C ../pgroonga.build -v
      - name: Reset the language model's cache directory
        # Because a permission error occurs when posting the cache during the shutdown process.
        if: matrix.groonga-main == 'yes'
        run: |
          sudo chown -R ${USER}: "${GRN_LANGUAGE_MODEL_DOWNLOAD_CACHE_DIR}"
      - name: Show diff
        if: failure()
        run: |
          cat ../pgroonga.build/regression.diffs || :
      - name: Show pgroonga.log
        if: failure()
        run: |
          sudo cat \
            /var/lib/postgresql/${{ matrix.postgresql-version }}/main/pgroonga.log || :
      - name: Show pgroonga.log of parsed backtrace
        if: failure()
        run: |
          wget --quiet https://raw.githubusercontent.com/groonga/groonga/main/tools/parse-backtrace.rb
          options=""
          if [ "${GROONGA_MAIN}" = "yes" ]; then
            options="--use-installed-groonga"
          else
            groonga_version=$(groonga --version | awk '{ print $2 }' | awk -F- '{ print $1}')
            options="--version ${groonga_version}"
          fi
          sudo ruby ./parse-backtrace.rb \
            ${options} \
            /var/lib/postgresql/${{ matrix.postgresql-version }}/main/pgroonga.log || :
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: ruby
          bundler-cache: true
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cache/red-datasets
          key: red-datasets-ubuntu
      - name: Run unit test
        run: |
          PATH="/usr/lib/postgresql/${{ matrix.postgresql-version }}/bin:$PATH" \
            bundle exec ruby \
              -I${{ github.workspace }}/pgroonga-benchmark/lib \
              test/run-test.rb -v
        env:
          # When scheduled execution, all tests are run.
          CI: ${{ github.event_name != 'schedule' }}
