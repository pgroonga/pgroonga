name: Package
on:
  push:
  pull_request:
  schedule:
    - cron: |
        0 0 * * *
concurrency:
  group: ${{ github.head_ref || github.sha }}-${{ github.workflow }}
  cancel-in-progress: true
jobs:
  source:
    if: >-
      github.event_name != 'schedule' ||
      (github.event_name == 'schedule' &&
       github.repository_owner == 'pgroonga')
    name: Source
    timeout-minutes: 5
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: ruby
          bundler-cache: true
      - name: Build archive
        run: |
          bundle exec rake dist

      # Artifact
      - uses: actions/upload-artifact@v4
        with:
          name: source
          path: pgroonga-*.tar.gz

      # Release
      - uses: actions/checkout@v4
        if: |
          startsWith(github.ref, 'refs/tags/')
        with:
          repository: "pgroonga/pgroonga.github.io"
          path: "pgroonga.github.io"
      - name: Extract release note
        if: |
          startsWith(github.ref, 'refs/tags/')
        run: |
          ruby \
            -e 'print("## PGroonga "); \
                puts(ARGF.read.split(/^## /)[1]. \
                       gsub(/ {.+?}/, ""). \
                       gsub(/\[(.+?)\]\[.+?\]/) {$1})' \
            pgroonga.github.io/news/index.md > release-note.md
      - name: Upload to release
        if: |
          startsWith(github.ref, 'refs/tags/')
        run: |
          title=$(head -n1 release-note.md | sed -e 's/^## //')
          tail -n +2 release-note.md > release-note-without-version.md
          gh release create ${GITHUB_REF_NAME} \
            --discussion-category Releases \
            --notes-file release-note-without-version.md \
            --title "${title}" \
            pgroonga-*.tar.gz \
            pgroonga-*.zip
        env:
          GH_TOKEN: ${{ github.token }}

  linux:
    name: Linux
    needs: source
    timeout-minutes: 15
    strategy:
      fail-fast: false
      matrix:
        package-id:
          - postgresql-17-pgdg-pgroonga-debian-bookworm
          - postgresql-17-pgdg-pgroonga-debian-bookworm-arm64
          - postgresql-17-pgdg-pgroonga-ubuntu-focal
          - postgresql-17-pgdg-pgroonga-ubuntu-focal-arm64
          - postgresql-17-pgdg-pgroonga-ubuntu-jammy
          - postgresql-17-pgdg-pgroonga-ubuntu-jammy-arm64
          - postgresql-17-pgdg-pgroonga-ubuntu-noble
          - postgresql-17-pgdg-pgroonga-ubuntu-noble-arm64
          - postgresql-17-pgdg-pgroonga-almalinux-8
          - postgresql-17-pgdg-pgroonga-almalinux-9
          - postgresql-16-pgdg-pgroonga-debian-bookworm
          - postgresql-16-pgdg-pgroonga-debian-bookworm-arm64
          - postgresql-16-pgdg-pgroonga-ubuntu-focal
          - postgresql-16-pgdg-pgroonga-ubuntu-focal-arm64
          - postgresql-16-pgdg-pgroonga-ubuntu-jammy
          - postgresql-16-pgdg-pgroonga-ubuntu-jammy-arm64
          - postgresql-16-pgdg-pgroonga-ubuntu-noble
          - postgresql-16-pgdg-pgroonga-ubuntu-noble-arm64
          - postgresql-16-pgdg-pgroonga-almalinux-9
          - postgresql-16-pgdg-pgroonga-almalinux-8
          - postgresql-16-pgroonga-ubuntu-noble
          - postgresql-15-pgdg-pgroonga-debian-bookworm
          - postgresql-15-pgdg-pgroonga-debian-bookworm-arm64
          - postgresql-15-pgdg-pgroonga-ubuntu-focal
          - postgresql-15-pgdg-pgroonga-ubuntu-focal-arm64
          - postgresql-15-pgdg-pgroonga-ubuntu-jammy
          - postgresql-15-pgdg-pgroonga-ubuntu-jammy-arm64
          - postgresql-15-pgdg-pgroonga-ubuntu-noble
          - postgresql-15-pgdg-pgroonga-ubuntu-noble-arm64
          - postgresql-15-pgdg-pgroonga-almalinux-9
          - postgresql-15-pgdg-pgroonga-almalinux-8
          - postgresql-15-pgroonga-debian-bookworm
          - postgresql-15-pgroonga-debian-bookworm-arm64
          - postgresql-14-pgdg-pgroonga-debian-bookworm
          - postgresql-14-pgdg-pgroonga-debian-bookworm-arm64
          - postgresql-14-pgdg-pgroonga-ubuntu-focal
          - postgresql-14-pgdg-pgroonga-ubuntu-focal-arm64
          - postgresql-14-pgdg-pgroonga-ubuntu-jammy
          - postgresql-14-pgdg-pgroonga-ubuntu-jammy-arm64
          - postgresql-14-pgdg-pgroonga-ubuntu-noble
          - postgresql-14-pgdg-pgroonga-ubuntu-noble-arm64
          - postgresql-14-pgdg-pgroonga-almalinux-8
          - postgresql-14-pgroonga-ubuntu-jammy
          - postgresql-13-pgdg-pgroonga-debian-bookworm
          - postgresql-13-pgdg-pgroonga-debian-bookworm-arm64
          - postgresql-13-pgdg-pgroonga-ubuntu-focal
          - postgresql-13-pgdg-pgroonga-ubuntu-focal-arm64
          - postgresql-13-pgdg-pgroonga-ubuntu-jammy
          - postgresql-13-pgdg-pgroonga-ubuntu-jammy-arm64
          - postgresql-13-pgdg-pgroonga-ubuntu-noble
          - postgresql-13-pgdg-pgroonga-ubuntu-noble-arm64
          - postgresql-13-pgdg-pgroonga-almalinux-8
          # Groonga 11.0.5 or later is required
          # - pgroonga-fedora-33
    env:
      APACHE_ARROW_REPOSITORY: ${{ github.workspace }}/apache-arrow
    # condition && true-case || false-case
    # ==
    # condition ? true-case : false-case
    runs-on: >-
      ${{ (contains(matrix.package-id, 'arm64') ||
           contains(matrix.package-id, 'aarch64')) && 'ubuntu-24.04-arm' ||
                                                      'ubuntu-latest' }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - uses: actions/checkout@v4
        with:
          path: apache-arrow
          repository: apache/arrow
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: ruby
          bundler-cache: true
      - name: Clone dependencies
        run: |
          cd ..
          git clone --depth 1 https://github.com/groonga/groonga.git
          cd groonga
          git submodule update --init --force --recursive --depth 1
      - name: Download archive
        uses: actions/download-artifact@v4
        with:
          name: source
      - name: Configure
        run: |
          set -eux
          package=$(echo ${{ matrix.package-id }} | \
                      sed -E -e 's/-(debian|ubuntu|almalinux|fedora).*$//g')
          os=$(echo ${{ matrix.package-id }} | \
                 sed -E -e 's/^.*-((debian|ubuntu|almalinux|fedora).*)$/\1/g')
          echo "PACKAGE=${package}" >> ${GITHUB_ENV}
          echo "OS=${os}" >> ${GITHUB_ENV}
          case ${os} in
            debian-*|ubuntu-*)
              echo "PACKAGE_TYPE=apt" >> ${GITHUB_ENV}
              ;;
            almalinux-*|fedora-*)
              echo "PACKAGE_TYPE=yum" >> ${GITHUB_ENV}
              ;;
          esac
          test_incus_image=$(echo ${os} | sed -E -e 's/-/\//g')
          echo "TEST_INCUS_IMAGE=images:${test_incus_image}" >> ${GITHUB_ENV}
      - name: Cache ccache
        uses: actions/cache@v4
        with:
          path: packages/${{ env.PACKAGE }}/${{ env.PACKAGE_TYPE }}/build/ccache
          key: package-${{ matrix.package-id }}-ccache-${{ hashFiles('src/*.c', 'src/*.h') }}
          restore-keys: package-${{ matrix.package-id }}-ccache-
      - name: Build with Docker
        run: |
          set -x
          cd packages/${PACKAGE}
          rake version:update
          rake \
            ${PACKAGE_TYPE}:build \
            $(echo ${PACKAGE_TYPE} | tr 'a-z' 'A-Z')_TARGETS=${OS} \
            BUILD_DIR=build
          mv ${PACKAGE_TYPE}/repositories/ ../../
        env:
          GROONGA_REPOSITORY: ../../../groonga

      # Artifact
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.package-id }}
          path: repositories/

      # Release
      - name: Create assets
        if: |
          startsWith(github.ref, 'refs/tags/')
        run: |
          tar czf ${{ matrix.package-id }}.tar.gz repositories/
      - name: Upload to release
        if: |
          startsWith(github.ref, 'refs/tags/')
        run: |
          gh release upload ${GITHUB_REF_NAME} \
            ${{ matrix.package-id }}.tar.gz
        env:
          GH_TOKEN: ${{ github.token }}

      # Test
      - name: Install Incus
        run: |
          sudo apt update
          sudo apt install -y -V incus
      - name: Allow egress network traffic flows for Incus
        run: |
          sudo iptables -I DOCKER-USER -i incusbr0 -j ACCEPT
          sudo iptables -I DOCKER-USER -o incusbr0 -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
      - name: Prepare container
        run: |
          set -x
          sudo incus admin init --auto
          sudo incus launch ${{ env.TEST_INCUS_IMAGE }} target
          sudo incus config device add target host-rw disk source=$PWD path=/host-rw
          sudo incus config device add target host disk source=$PWD path=/host readonly=true
          # Ideally, we would use systemctl is-system-running --wait to ensure all services are fully operational.
          # However, this option doesn't work in AlmaLinux 8 and results in an error.
          # As a workaround, we introduced a 10-second sleep delay to allow network services time to stabilize,
          # preventing DNS resolution errors when attempting to dnf install command.
          # ref: https://discuss.linuxcontainers.org/t/network-issue-with-almalinux-8-9-on-github-actions-using-incus/20046
          sleep 10
      - name: Test
        run: |
          sudo incus exec target \
            -- \
            /host/packages/${PACKAGE_TYPE}/test.sh
      - name: Delete container
        run: |
          sudo incus stop target
          sudo incus delete target

      # Upload logs
      - uses: actions/upload-artifact@v4
        if: |
          failure()
        with:
          name: ${{ matrix.package-id }}-logs
          path: logs/
