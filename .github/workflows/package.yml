name: Package
on:
  push:
    branches:
      - main
    tags:
      - "*"
  pull_request:
  schedule:
    - cron: |
        0 0 * * *
jobs:
  source:
    if: >-
      github.event_name != 'schedule' ||
      (github.event_name == 'schedule' &&
       github.repository_owner == 'pgroonga')
    name: Source
    timeout-minutes: 5
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: ruby
          bundler-cache: true
      - name: Build archive
        run: |
          bundle exec rake dist

      # Artifact
      - uses: actions/upload-artifact@v3
        with:
          name: source
          path: pgroonga-*.tar.gz

      # Release
      - uses: actions/checkout@v4
        if: |
          startsWith(github.ref, 'refs/tags/')
        with:
          repository: "pgroonga/pgroonga.github.io"
          path: "pgroonga.github.io"
      - name: Extract release note
        if: |
          startsWith(github.ref, 'refs/tags/')
        run: |
          ruby \
            -e 'print("## PGroonga "); \
                puts(ARGF.read.split(/^## /)[1]. \
                       gsub(/ {.+?}/, ""). \
                       gsub(/\[(.+?)\]\[.+?\]/) {$1})' \
            pgroonga.github.io/news/index.md > release-note.md
      - name: Upload to release
        if: |
          startsWith(github.ref, 'refs/tags/')
        run: |
          title=$(head -n1 release-note.md | sed -e 's/^## //')
          tail -n +2 release-note.md > release-note-without-version.md
          gh release create ${GITHUB_REF_NAME} \
            --discussion-category Releases \
            --notes-file release-note-without-version.md \
            --title "${title}" \
            pgroonga-*.tar.gz \
            pgroonga-*.zip
        env:
          GH_TOKEN: ${{ github.token }}

  linux:
    name: Linux
    needs: source
    # arm64 packages are often stuck.
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        package-id:
          - postgresql-16-pgdg-pgroonga-debian-bookworm
          - postgresql-16-pgdg-pgroonga-debian-bookworm-arm64
          - postgresql-16-pgdg-pgroonga-ubuntu-focal
          - postgresql-16-pgdg-pgroonga-ubuntu-focal-arm64
          - postgresql-16-pgdg-pgroonga-ubuntu-jammy
          - postgresql-16-pgdg-pgroonga-ubuntu-jammy-arm64
          - postgresql-16-pgdg-pgroonga-almalinux-9
          - postgresql-16-pgdg-pgroonga-almalinux-8
          - postgresql-15-pgdg-pgroonga-debian-bookworm
          - postgresql-15-pgdg-pgroonga-debian-bookworm-arm64
          - postgresql-15-pgdg-pgroonga-debian-bullseye
          - postgresql-15-pgdg-pgroonga-debian-bullseye-arm64
          - postgresql-15-pgdg-pgroonga-ubuntu-focal
          - postgresql-15-pgdg-pgroonga-ubuntu-focal-arm64
          - postgresql-15-pgdg-pgroonga-ubuntu-jammy
          - postgresql-15-pgdg-pgroonga-ubuntu-jammy-arm64
          - postgresql-15-pgdg-pgroonga-almalinux-9
          - postgresql-15-pgdg-pgroonga-almalinux-8
          - postgresql-15-pgdg-pgroonga-centos-7
          - postgresql-15-pgroonga-debian-bookworm
          - postgresql-15-pgroonga-debian-bookworm-arm64
          - postgresql-14-pgdg-pgroonga-debian-bookworm
          - postgresql-14-pgdg-pgroonga-debian-bookworm-arm64
          - postgresql-14-pgdg-pgroonga-debian-bullseye
          - postgresql-14-pgdg-pgroonga-debian-bullseye-arm64
          - postgresql-14-pgdg-pgroonga-ubuntu-focal
          - postgresql-14-pgdg-pgroonga-ubuntu-focal-arm64
          - postgresql-14-pgdg-pgroonga-ubuntu-jammy
          - postgresql-14-pgdg-pgroonga-ubuntu-jammy-arm64
          - postgresql-14-pgdg-pgroonga-almalinux-8
          - postgresql-14-pgdg-pgroonga-centos-7
          - postgresql-13-pgdg-pgroonga-debian-bookworm
          - postgresql-13-pgdg-pgroonga-debian-bookworm-arm64
          - postgresql-13-pgdg-pgroonga-debian-bullseye
          - postgresql-13-pgdg-pgroonga-debian-bullseye-arm64
          - postgresql-13-pgdg-pgroonga-ubuntu-focal
          - postgresql-13-pgdg-pgroonga-ubuntu-focal-arm64
          - postgresql-13-pgdg-pgroonga-ubuntu-jammy
          - postgresql-13-pgdg-pgroonga-ubuntu-jammy-arm64
          - postgresql-13-pgdg-pgroonga-almalinux-8
          - postgresql-13-pgdg-pgroonga-centos-7
          - postgresql-13-pgroonga-amazon-linux-2
          - postgresql-13-pgroonga-debian-bullseye
          - postgresql-13-pgroonga-debian-bullseye-arm64
          - postgresql-12-pgdg-pgroonga-debian-bookworm
          - postgresql-12-pgdg-pgroonga-debian-bookworm-arm64
          - postgresql-12-pgdg-pgroonga-debian-bullseye
          - postgresql-12-pgdg-pgroonga-debian-bullseye-arm64
          - postgresql-12-pgdg-pgroonga-ubuntu-focal
          - postgresql-12-pgdg-pgroonga-ubuntu-focal-arm64
          - postgresql-12-pgdg-pgroonga-ubuntu-jammy
          - postgresql-12-pgdg-pgroonga-ubuntu-jammy-arm64
          - postgresql-12-pgdg-pgroonga-almalinux-8
          - postgresql-12-pgdg-pgroonga-centos-7
          - postgresql-12-pgroonga-amazon-linux-2
          - postgresql-12-pgroonga-centos-7
          - postgresql-11-pgroonga-centos-7
          # Groonga 11.0.5 or later is required
          # - pgroonga-fedora-33
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: ruby
          bundler-cache: true
      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt -y -V install \
            qemu-user-static
      - name: Clone dependencies
        run: |
          cd ..
          git clone --depth 1 https://github.com/groonga/groonga.git
          cd groonga
          git submodule update --init --force --recursive --depth 1
      - name: Download archive
        uses: actions/download-artifact@v3
        with:
          name: source
      - name: Configure
        run: |
          set -eux
          package=$(echo ${{ matrix.package-id }} | \
                      sed -E -e 's/-(debian|ubuntu|almalinux|amazon-linux|centos|fedora).*$//g')
          os=$(echo ${{ matrix.package-id }} | \
                 sed -E -e 's/^.*-((debian|ubuntu|almalinux|amazon-linux|centos|fedora).*)$/\1/g')
          echo "PACKAGE=${package}" >> ${GITHUB_ENV}
          echo "OS=${os}" >> ${GITHUB_ENV}
          case ${os} in
            debian-*|ubuntu-*)
              echo "PACKAGE_TYPE=apt" >> ${GITHUB_ENV}
              ;;
            almalinux-*|amazon-linux-*|centos-*|fedora-*)
              echo "PACKAGE_TYPE=yum" >> ${GITHUB_ENV}
              ;;
          esac
          test_docker_image=$(echo ${os} | \
                                sed -E \
                                    -e 's/amazon-linux/amazonlinux/g' \
                                    -e 's/-/:/g')
          case ${test_docker_image} in
            *:arm64)
              echo "ARCHITECTURE=arm64" >> ${GITHUB_ENV}
              test_docker_image="$(echo ${test_docker_image} | \
                                     sed -E -e 's/:arm64$//g')"
              test_docker_image="arm64v8/${test_docker_image}"
              ;;
            *)
              echo "ARCHITECTURE=amd64" >> ${GITHUB_ENV}
              ;;
          esac
          echo "TEST_DOCKER_IMAGE=${test_docker_image}" >> ${GITHUB_ENV}
      - name: Cache ccache
        uses: actions/cache@v3
        with:
          path: packages/${{ env.PACKAGE }}/${{ env.PACKAGE_TYPE }}/build/ccache
          key: package-${{ matrix.package-id }}-ccache-${{ hashFiles('src/*.c', 'src/*.h') }}
          restore-keys: package-${{ matrix.package-id }}-ccache-
      - name: Build with Docker
        run: |
          set -x
          cd packages/${PACKAGE}
          rake version:update
          rake \
            ${PACKAGE_TYPE}:build \
            $(echo ${PACKAGE_TYPE} | tr 'a-z' 'A-Z')_TARGETS=${OS} \
            BUILD_DIR=build
          mv ${PACKAGE_TYPE}/repositories/ ../../
        env:
          GROONGA_REPOSITORY: ../../../groonga

      # Artifact
      - uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.package-id }}
          path: repositories/

      # Release
      - name: Create assets
        if: |
          startsWith(github.ref, 'refs/tags/')
        run: |
          tar czf ${{ matrix.package-id }}.tar.gz repositories/
      - name: Upload to release
        if: |
          startsWith(github.ref, 'refs/tags/')
        run: |
          gh release upload ${GITHUB_REF_NAME} \
            ${{ matrix.package-id }}.tar.gz
        env:
          GH_TOKEN: ${{ github.token }}

      # Test
      - name: Test
        if: |
          env.ARCHITECTURE != 'arm64'
        run: |
          docker run \
            --rm \
            --volume ${PWD}:/host:ro \
            ${TEST_DOCKER_IMAGE} \
            /host/packages/${PACKAGE_TYPE}/test.sh
