name: Windows
on:
  push:
    branches:
      - "*"
    tags:
      - "*"
  pull_request:
    branches:
      - "*"
  schedule:
    - cron: |
        0 0 * * *
jobs:
  test:
    name: ${{ matrix.label }}
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - artifact-id: "postgresql-9.6-x64"
            cmake-generator: "Visual Studio 16 2019"
            label: PostgreSQL 9.6 + Visual Studio 2019
            postgresql-version-major: "9.6"
            postgresql-version: "9.6.23-1"
          - artifact-id: "postgresql-10-x64"
            cmake-generator: "Visual Studio 16 2019"
            label: PostgreSQL 10 + Visual Studio 2019
            postgresql-version-major: "10"
            postgresql-version: "10.18-1"
          - artifact-id: "postgresql-11-x64"
            cmake-generator: "Visual Studio 16 2019"
            label: PostgreSQL 11 + Visual Studio 2019
            postgresql-version-major: "11"
            postgresql-version: "11.13-1"
          - artifact-id: "postgresql-12-x64"
            cmake-generator: "Visual Studio 16 2019"
            label: PostgreSQL 12 + Visual Studio 2019
            postgresql-version-major: "12"
            postgresql-version: "12.8-1"
          - artifact-id: "postgresql-13-x64"
            cmake-generator: "Visual Studio 16 2019"
            label: PostgreSQL 13 + Visual Studio 2019
            postgresql-version-major: "13"
            postgresql-version: "13.4-1"
          - artifact-id: "postgresql-14-x64"
            cmake-generator: "Visual Studio 16 2019"
            label: PostgreSQL 14 + Visual Studio 2019
            postgresql-version-major: "14"
            postgresql-version: "14.0-1"
          - artifact-id: "postgresql-14-x64-groonga-master"
            cmake-generator: "Visual Studio 16 2019"
            groonga-master: "yes"
            label: PostgreSQL 14 + Visual Studio 2019 + Groonga master
            postgresql-version-major: "14"
            postgresql-version: "14.0-1"
    env:
      PGROONGA_TEST_DATA: "test-data"
      PGROONGA_TEST_ENCODING: "UTF-8"
      PGROONGA_TEST_USER: "pgroonga-test"
    steps:
      - name: Disable crash dialog
        run: |
          reg add "HKCU\SOFTWARE\Microsoft\Windows\Windows Error Reporting" `
            /v DontShowUI `
            /t REG_DWORD `
            /d 1 `
            /f
      - name: Use JST
        run: |
          Set-TimeZone -Id "Tokyo Standard Time"
      - uses: actions/setup-ruby@v1
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Install Visual Studio
        if:
          matrix.visual-studio-package
        run: |
          choco install -y ${{ matrix.visual-studio-package }}
      - name: Download PostgreSQL
        run: |
          cd ..
          $POSTGRESQL_ARCHIVE_NAME = `
            "postgresql-${{ matrix.postgresql-version }}-windows-x64-binaries.zip"
          Invoke-WebRequest `
            "https://get.enterprisedb.com/postgresql/$POSTGRESQL_ARCHIVE_NAME" `
            -OutFile $POSTGRESQL_ARCHIVE_NAME
          Expand-Archive -Path $POSTGRESQL_ARCHIVE_NAME -DestinationPath .
      - name: Download Groonga
        run: |
          if ("${{ matrix.groonga-master }}" -eq "yes") {
            git clone --depth 1 `
              https://github.com/groonga/groonga.git `
              vendor\groonga
              cd vendor\groonga
              git submodule update --init
              cd vendor
              ruby download_lz4.rb
              ruby download_mecab.rb
              ruby download_message_pack.rb
              ruby download_rapidjson.rb
              ruby download_xxhash.rb
              ruby download.rb zstd
            Write-Output "VC_PREFIX=C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC" | `
              Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          } else {
            Invoke-WebRequest `
              https://packages.groonga.org/source/groonga/groonga-latest.zip `
              -OutFile groonga-latest.zip
            Expand-Archive -Path groonga-latest.zip -DestinationPath .
            rm groonga-latest.zip
            mv groonga-* vendor\groonga
          }
      - name: Run CMake
        shell: cmd
        run: |
          if not "%VC_PREFIX%" == "" (
            call "%VC_PREFIX%\Auxiliary\Build\vcvars64.bat"
          )
          mkdir ..\build
          cmake ^
            -A x64 ^
            -B ..\build ^
            -G "${{ matrix.cmake-generator }}" ^
            -S . ^
            -DCMAKE_INSTALL_PREFIX="..\pgsql" ^
            -DGRN_WITH_BUNDLED_LZ4=yes ^
            -DGRN_WITH_BUNDLED_MECAB=yes ^
            -DGRN_WITH_BUNDLED_MESSAGE_PACK=yes ^
            -DGRN_WITH_BUNDLED_RAPIDJSON=yes ^
            -DGRN_WITH_BUNDLED_ZSTD=yes ^
            -DGRN_WITH_MRUBY=yes ^
            -DPGRN_POSTGRESQL_VERSION_MAJOR=${{ matrix.postgresql-version-major }}
      - name: Build
        shell: cmd
        run: |
          if not "%VC_PREFIX%" == "" (
            call "%VC_PREFIX%\Auxiliary\Build\vcvars64.bat"
          )
          cmake ^
            --build ..\build ^
            --config RelWithDebInfo ^
            --parallel %NUMBER_OF_PROCESSORS% ^
            --verbose
      - name: Install
        run: |
          cmake `
            --build ..\build `
            --config RelWithDebInfo `
            --target install `
            --verbose

      # Upload artifacts
      - name: Package
        run: |
          New-Item artifacts -ItemType Directory
          cmake `
            --build ..\build `
            --config RelWithDebInfo `
            --target package `
            --verbose
          Copy-Item -Path ..\build\*.zip -Destination artifacts
          Write-Output "ARTIFACT_BASENAME=$((Get-Item artifacts\*.zip).name)" | `
            Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.artifact-id }}
          path: artifacts

      # Release
      - name: Ensure creating release
        if: |
          startsWith(github.ref, 'refs/tags/') && matrix.groonga-master != 'yes'
        id: create-release
        uses: actions/github-script@0.4.0
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: string
          script: |
            const AsyncFunction = Object.getPrototypeOf(async () => {}).constructor
            const fs = require("fs");
            const path = ".github/workflows/ensure-creating-release.js";
            const script = fs.readFileSync(path).toString();
            const func = new AsyncFunction("require", "github", "context", script);
            return await func(require, github, context);
      - name: Upload to release
        uses: actions/upload-release-asset@v1.0.1
        if: |
          startsWith(github.ref, 'refs/tags/') && matrix.groonga-master != 'yes'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.result }}
          asset_path: artifacts/${{ env.ARTIFACT_BASENAME }}
          asset_name: ${{ env.ARTIFACT_BASENAME }}
          asset_content_type: application/zip

      # Test
      - name: Run PostgreSQL for test
        run: |
          ..\pgsql\bin\initdb `
            --encoding=${Env:PGROONGA_TEST_ENCODING} `
            --locale=C `
            --pgdata=${Env:PGROONGA_TEST_DATA} `
            --username=${Env:PGROONGA_TEST_USER}
          ..\pgsql\bin\pg_ctl start `
            --pgdata=${Env:PGROONGA_TEST_DATA}
      - name: Run regression test
        run: |
          # TODO: Remove me when Groonga bundles libstemmer
          Remove-Item sql\full-text-search\text\options\token-filters\custom.sql
          # Reduce tests to reduce test time
          Remove-Item sql\compatibility -Recurse -Force
          if (${{ matrix.postgresql-version-major }} -lt 13) {
            Remove-Item sql\full-text-search\text\single\declarative-partitioning.sql
          }
          ruby test\prepare.rb > schedule
          $Env:PG_REGRESS_DIFF_OPTS = "-u"
          ..\pgsql\bin\pg_regress `
            --bindir=..\pgsql\bin `
            --encoding=${Env:PGROONGA_TEST_ENCODING} `
            --launcher=test\short-pgappname.bat `
            --load-extension=pgroonga `
            --schedule=schedule `
            --user=${Env:PGROONGA_TEST_USER}
      - name: Shutdown PostgreSQL for test
        if: always()
        run: |
          ..\pgsql\bin\pg_ctl stop `
            --pgdata=${Env:PGROONGA_TEST_DATA}
      - name: Show diff
        if: failure()
        run: |
          Get-Content regression.diffs
      - name: Run unit test
        run: |
          $Env:PATH = "$(Get-Location)\..\pgsql\bin;${Env:PATH}"
          # TODO: Remove me when we fix test failure on Windows
          Remove-Item test\test-streaming-replication.rb
          ruby test\run-test.rb
