CREATE TABLE memos (
  id integer,
  content text
) PARTITION BY RANGE (id);
CREATE TABLE memos_0_10000
  PARTITION OF memos
  FOR VALUES FROM (0) TO (10000);
CREATE TABLE memos_10000_20000
  PARTITION OF memos
  FOR VALUES FROM (10000) TO (20000);
CREATE TABLE memos_20000_30000
  PARTITION OF memos
  FOR VALUES FROM (20000) TO (30000);
INSERT INTO memos
  SELECT id, 'data: ' || id
    FROM generate_series(0, 29999) AS id;
CREATE INDEX memos_fts ON memos USING pgroonga (content);
SET parallel_setup_cost = 0;
SET parallel_tuple_cost = 0;
SET min_parallel_table_scan_size = 0;
SET max_parallel_workers_per_gather = 4;
DO LANGUAGE plpgsql $$
BEGIN
        PERFORM 1
                WHERE current_setting('server_version_num')::int >= 160000;
        IF FOUND THEN
                SET debug_parallel_query = on;
        ELSE
                SET force_parallel_mode = on;
        END IF;
END;
$$;
SET enable_seqscan = off;
SET enable_indexscan = on;
SET enable_bitmapscan = off;
EXPLAIN (COSTS OFF)
SELECT count(id)
  FROM memos
 WHERE content &@~ 'data 9*';
                                                  QUERY PLAN                                                  
--------------------------------------------------------------------------------------------------------------
 Finalize Aggregate
   ->  Gather
         Workers Planned: 2
         ->  Partial Aggregate
               ->  Parallel Append
                     ->  Parallel Index Scan using memos_0_10000_content_idx on memos_0_10000 memos_1
                           Index Cond: (content &@~ 'data 9*'::text)
                     ->  Parallel Index Scan using memos_10000_20000_content_idx on memos_10000_20000 memos_2
                           Index Cond: (content &@~ 'data 9*'::text)
                     ->  Parallel Index Scan using memos_20000_30000_content_idx on memos_20000_30000 memos_3
                           Index Cond: (content &@~ 'data 9*'::text)
(11 rows)

SELECT count(id)
  FROM memos
 WHERE content &@~ 'data 9*';
 count 
-------
  1111
(1 row)

DROP TABLE memos;
